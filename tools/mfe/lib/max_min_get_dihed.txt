/*
float get_dihedral(Vector4<float> v0, Vector4<float> v1, Vector4<float> v2, Vector4<float> v3) {
    float angle,cos_theta;
    Vector4<float> i,j,k;
    Vector4<float> r21,r10,r10_p,r23;

    r21 = v1-v2;
    r10 = v0-v1;
    r23 = v3-v2;
    k   = r21; k.Normalize3();
    //printf("%8.3f,%8.3f,%8.3f,%8.3f,%8.3f,%8.3f,%8.3f\n",cos_theta,v1[0],v1[1],v1[2],v3[0],v3[1],v3[2]);
    i   = r23 - (k * k.DotProduct3(r23));
    //printf("%8.3f,%8.3f,%8.3f,%8.3f,%8.3f,%8.3f,%8.3f\n",cos_theta,i[0],i[1],i[2],k[0],k[1],k[2]);
    i.Normalize3();
    j   = CrossProduct(k,i);
    r10_p = r10 - (k * k.DotProduct3(r10)); r10_p.Normalize3();

    cos_theta = r10_p.DotProduct3(i);
    //printf("%8.3f,%8.3f,%8.3f,%8.3f,%8.3f,%8.3f,%8.3f\n",cos_theta,i[0],i[1],i[2],k[0],k[1],k[2]);
    if (cos_theta > 1.) cos_theta = 1.;
    else if (cos_theta < -1.) cos_theta = -1.;
    angle = acos(cos_theta);

    if (r10_p.DotProduct3(j) < 0.)
        angle = -angle;

    return angle;
}
*/

